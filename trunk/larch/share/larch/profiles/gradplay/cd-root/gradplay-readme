gradplay - a simple media player
================================

I wanted to turn an old computer into a really simple media player which
would work pretty much like a normal DVD player, only it would cope with
more media formats and drive a computer monitor rather than a TV. We don't
have a TV and don't want one.

geexbox looked attractive, but it didn't work very well with my i810
graphics - which seems to need xorg for acceleration. I had a look at
oxine, which is also attractive, but it had rather too many features
and was not so easy to customize. Also both mplayer (in geexbox) and
xine (in oxine) seem not to cope quite as well with DVD navigation
as vlc, which I then decided to use as the main media player, also
because it offers a variety of control possibilities, including
via a unix socket - which looked quite promising.

I only wanted ir-remote control for input, the box was to be without
mouse and keyboard. Fortunately lirc seems pretty straightforward, and
using the python interface, pylirc, even more so. The only quite
tricky bit was getting it configured for a particular ir-controller, as
not all are 100% supported.

For display of information and menus I decided to go for xosd (via its
python wrapper). It's pretty limited in what it can do, but this has the
advantage that it's also rather simple.

All the program is written in python, and most of the modules are not
very large, so it should be easy enough to modify it for individual
needs.

Probably the most tricky bit is the handling of background images, which
change from time to time, and - by using modules from xscreensaver - are
pretty dynamic. They can also spring into the foreground, to act like
a screensaver, but this is controlled by my program, not by xscreensaver.

After some initial tests I decided to use cdcd instead of vlc for audio
CDs, simply because some commercial CDs have an annoying 'copy protection'
which involves putting meaningless data at the end of the music, which
vlc can't distinguish and tries to play (and which doesn't sound too good),
whereas cdcd just stops, which I think is better. Bear in mind that the
sound cable from the CD player to the sound card must be in place for this
to work as cdcd only uses the analogue signal from the CD player.

One (present) limitation of vlc is that its 'rc' control input doesn't cover
the whole range of needed commands (e.g. DVD navigation is missing). Apart
from that it's a very nice way of controlling vlc. To get over the
shortcomings I decided to send x-events to the video window. This can be
done quite nicely using the command line program 'sendxevent', which can be
found in the 'contrib' directory of the lirc distribution. It is basically
a stripped down version of 'ixevent', taking its input from the command line
rather than lirc. I made a couple of minor changes and packaged it up
separately.

This program was designed to run from compact flash in an IDE socket,
but it will also work from a normal hard disk, or even - if you have
enough RAM (so that the system can be copied to RAM during booting) -
from a live CD.

I have used larch as the basis for the system, installing it as a squashed
image, rather than a normal installation. Thus it stays reasonably compact
and the boot medium is used read only, so it should be fairly robust.


How to use it
=============

The program can of course be used on a normal linux system, so long as the
dependencies are installed, but the window manager may prevent some of the
'special effects' (background images) working. For a system which is
a dedicated media player, no window manager is necessary.

I have added a 'build profile' called 'gradplay' to the larch package, so
that a live CD containing the program can be built easily. This live CD can
then be used to install the system to a hard disk partition, or to a compact
flash card.

You will almost certainly need to adjust xorg.conf for your video card.
There is a default supplied but it uses vesa, which probably won't give much
joy on video playback. I have also supplied my i810 configuration (note the
German keyboard!). If you are lucky the live CD will boot straight into
the program. If not (e.g. because you have i810 graphics, which doesn't like
vesa), you'll have to wait to see what it looks like. You probably won't be
able to do any more than seeing it, though, because lirc needs setting up.

In any case, kill the X-server with ctrl-Alt-Backspace and do the installation
(you can log in to further terminals as 'root' without password):

Prepare the installation partition, e.g. with cfdisk, and format it - I would
suggest ext2. Then run liveInstall, which copies the CD contents to the
partition, generates a new initramfs and sets up grub. If all went well, a
reboot should land you in the new larch/gradplay system.

Kill the X-server and set up xorg.conf to suit your hardware.
A wildly different resolution from the default might make font sizes
unsuitable, so either leave it at 800x600 or choose something comparable. For
media player purposes, this should be a quite adequate resolution.

The other main task is to set up lirc. There is quite a bit of documentation
on www.lirc.org, including how to build ir-receivers. I assume a simple
serial receiver on /dev/ttyS0. If you have something different you'll have
to figure out what to change. You can use 'irrecord' to set up
/etc/lircd.conf (but you'll need to stop lircd first: /etc/rc.d/lircd stop),
then make sure the combination of this with /root/.lircrc gives the correct
signals to gradplay. Use the supplied versions to see what signals are needed.

The sound channels also need unmuting and setting to something reasonable
(Master out, PCM and CD). I have put what I hope will be a generally valid
solution in /etc/rc.local, using amixer to set the levels, but you may need
to tweak something here.

Copy /etc/fstab from /etc/fstab-gp as a starting point and adjust it to suit
your hardware. Maybe it won't need changing. You can look in the auto-
generated fstab file to see where your devices have been found.

As the system is running in tmpfs, any changes you make will be lost over a
reboot, so they must be 'carved in stone'. To do this, you can use the
'session-saving' feature of larch. Just reboot and you should be asked if
you want to save the session. In this case, you do.

If all went well you should now be able to reboot into a working system.
When you have finished setting things up you can do 'touch /larch/nosave'
and then 'reboot', doing a session save when asked. In future you should
then not be asked if you want to save the session when shutting down.
If you should need to make any subsequent changes, just remove
/.livesys/nosave, then you should get a one-off session-save prompt when
you shut down.

You can make other changes to the system by remounting the device rw:
  mount -o remount,rw /.livesys/livecd

Old overlay files end with '~', and can be deleted if you like.

Trying to modify files which are currently in use (certain of the .sqf files)
is unlikely to have the desired effect ... that's why there is the session-
save feature. 

(You can finish with 'mount -o remount,ro /.livesys/livecd', if you like,
but this might not work.)

Using 'Session-Save' on the live CD
-----------------------------------

You can of course make your changes while running direct from the CD if you
prefer, and then save these using the session save feature, so that your CD
is customized for your machine. If you have enough memory (512MB should be
plenty), you should use the 'c2r' (copy to RAM) boot parameter, because
otherwise the session-save might not work. This also allows you to test
the system thoroughly before installing it.


Hardware requirements
=====================

Well, I'm not really sure exactly how much power you need. All I can say
is that a P3 933MHz with 128MB RAM and i810 on-board graphics worked fine.
The simple home-made ir-receiver design on the lirc site, together with a
cheap universal controller also worked fine (you just have to find a
setting for the controller which is comprehensible to lirc).

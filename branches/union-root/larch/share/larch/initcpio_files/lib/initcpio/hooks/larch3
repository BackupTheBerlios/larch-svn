# larch3 -  live 'hook' for mkinitcpio:
#                 determine overlay file,
#                 deal with c2r,
#                 mount base system,
#                 load overlay
#                 set up unioned root filesystem,

# Author: Michael Towers (gradgrind) <mt.42@web.de>
#
# This file is part of the larch project.
#
#    larch is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    larch is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with larch; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#----------------------------------------------------------------------------
# 2007.12.19

# Merge overlay into system sqfs
#TODO:
# some way of using memory and/or swap for the rebuilds
merge ()
{
    sysmerge=""
    homemerge=""
    newSysSqf=${sysSqf}_
    newHomeSqf=${homeSqf}_

    # A possibility to use alternative files:
    if [ -f ${cdmount}/larch/boot-merge ]; then
        . ${cdmount}/larch/boot-merge
    fi

    mount -o remount,rw ${LDEV} ${cdmount}
    if [ "${merge}" = "all" ]; then

        sysmerge="yes"

        ignoredirs="dev mnt media proc sys tmp .livesys"
        if [ "_" != "${newHomeSqf}" ]; then
            ignoredirs="${ignoredirs} home"
            homemerge="yes"
        fi

        msg_ ":: Merging system: ${sysSqf}"
        /sbin/mksquashfs "/union" "${newSysSqf}" -e ${ignoredirs}
        if [ $? -ne 0 ]; then
            echo "ERROR: squash failed --- not merging"
            nuke ${newSysSqf}
            return 1
        fi

    elif [ "${merge}" = "home" ] && [ "_" != "${newHomeSqf}" ]; then

        homemerge="yes"

    else

        echo "ERROR: bad merge option (must be 'all' or 'home')"
        return 1

    fi

    if [ "x${homemerge}" != "x" ]; then
        msg_ ":: Merging /home: ${homeSqf}"
        /sbin/mksquashfs "/union/home" "${newHomeSqf}" "-keep-as-directory"
        if [ $? -ne 0 ]; then
            echo "ERROR: squashing home failed --- not merging"
            nuke "${newHomeSqf}"
            if [ -f ${newSysSqf} ]; then
                nuke ${newSysSqf}
            fi
            return 1
        fi
    fi

    # Now need to unmount the old files, so that they can be replaced.
    # NEEDS normal umount (with -d option), renamed to umountx
    /bin/umountx /union
    /bin/umountx -d /tfs/system
    /bin/umountx -d /tfs/home 2>1 >/dev/null

    # Remove the old overlay first, in case there are space problems
    nuke ${ovlx}
    if [ "x${sysmerge}" != "x" ]; then
        mv -f ${newSysSqf} ${sysSqf}
    fi
    if [ "x${homemerge}" != "x" ]; then
        mv -f ${newHomeSqf} ${homeSqf}
    fi

    # Recreate the overlay archive
    if [ "${merge}" = "all" ]; then
        # Make new overlay with only /mnt
        overlayb="/"
        mkdir /overlay
        mv /tfs/overlay/mnt /overlay
        overlayx=""
    else
        overlayb="/tfs"
        overlayx="--exclude=overlay/home"
    fi
    tar -cf - ${overlayx} -C ${overlayb} overlay | lzop > ${ovlx}

    mount -o remount,ro ${LDEV} ${cdmount}
    return 0
}

run_hook ()
{
    if [ "x${LDEV}" = "x" ]; then
        err "Sorry, couldn't find boot medium ..."
        break="y"
        return
    fi

    # Path to compressed base system
    sysSqf=${cdmount}/system.sqf
    # Path to compressed home folder
    homeSqf=${cdmount}/home.sqf
    # Default overlay file
    ovlx=${cdmount}/overlay.ovl

    # A possibility to use alternative files:
    if [ -f ${cdmount}/larch/boot-init ]; then
        . ${cdmount}/larch/boot-init
    fi

    # Maybe there is no separate 'home' image
    if ! [ -f ${homeSqf} ]; then
        homeSqf=""
    fi

    # Boot option copy-to-ram (c2r)
    if [ "${c2r}" = "y" ]; then
        # force use of swap (if available)
        :> /tfs/swapon
        :> /tfs/c2r

        msg_ ":: Copying base system to RAM, this will take a while ..."
        /bin/cat ${sysSqf} > /tfs/system.sqf
        sysSqf=/tfs/system.sqf

        if [ "x${homeSqf}" != "x" ]; then
            msg_ ":: Copying home folder to RAM, this might take a while ..."
            /bin/cat ${homeSqf} > /tfs/home.sqf
            homeSqf=/tfs/home.sqf
        fi

        # Unmount boot device
        umount ${cdmount}

    else

        if [ "${swap}" = "y" ]; then
            :> /tfs/swapon
        fi
    fi

    msg_ ":: Mounting squashed images"
    /bin/mkdir /tfs/system
    # The klibc mount command doesn't support '-o loop'
    /bin/losetup /dev/loop0 ${sysSqf}
    /bin/mount -r -t squashfs /dev/loop0 /tfs/system

    if [ "x${homeSqf}" != "x" ]; then
        /bin/mkdir /tfs/home
        # The klibc mount command doesn't support '-o loop'
        /bin/losetup /dev/loop0 ${homeSqf}
        /bin/mount -r -t squashfs /dev/loop0 /tfs/home
    fi

    # NEED tar, lzop
    msg_ ":: Initializing writeable layer for union (overlay)"
    /usr/bin/lzop -d < ${ovlx} | tar -C /tfs -xf -

    msg_ ":: Setting up union file system"
    # Make union root
    mkdir /union

    layers="/tfs/overlay=rw"
    if [ "x${homeSqf}" != "x" ]; then
        layers=${layers}:/tfs/home=${sqfmnt}
    fi
    layers=${layers}:/tfs/system=${sqfmnt}
    mount -t ${utype} -o ${bropt}${layers} ${utype} /union

    # Handle merging overly back into squashed system archives
    if [ "x${merge}" != "x" ]; then
        merge
        echo "Rebooting"
        /bin/reboot
    fi

    echo "${utype}" > /tfs/utype

    # Minimal device nodes needed before udev does its work
    /bin/mkdir /union/dev
    /bin/mknod /union/dev/console c 5 1
    /bin/mknod /union/dev/null c 1 3
    /bin/mknod /union/dev/zero c 1 5

    # Make special directories
    /bin/mkdir -m 1777 /union/tmp
    /bin/mkdir /union/media
    /bin/mkdir /union/sys
    /bin/mkdir /union/proc

    # Make the tmpfs stuff accessible within the union
    /bin/mkdir /union/.livesys
    /bin/mount -o bind /tfs /union/.livesys

    /bin/mkdir /union/.livesys/medium

    /bin/mount -o bind /tfs/system /union/.livesys/system
    /bin/mount -o bind /tfs/overlay /union/.livesys/overlay
    /bin/mount -o bind ${cdmount} /union/.livesys/medium

    if [ "x${homeSqf}" != "x" ]; then
        /bin/mkdir /union/.livesys/home
        /bin/mount -o bind /tfs/home /union/.livesys/home
    fi

    # Remember the boot device
    echo "${LDEV}" > /tfs/bootdevice

    msg_ ":: End of live system set-up"

    # Now some tweaks to alter 'init' actions from non-larch hooks, etc.
    # Override rootdelay from usb hook
    if [ "x${larchdelay}" = "x"  ]; then
        # To avoid spurious udevd pid numbers
        export rootdelay=1
    else
        # Allow adjustment via boot option
        export rootdelay=${larchdelay}
    fi
    # root must be set to something or other, even though larch doesn't
    # need it ...
    export root="/dev/loop0"
}

#######
# The actual root switch occurs later, when 'init' execs 'kinit'.
# I handle this by overwriting the 'kinit' binary with my own script.
# This will unmount dev, sys and proc and then exec run-init.
#######

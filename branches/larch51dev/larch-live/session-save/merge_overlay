#!/bin/sh

# merge_overlay   - recreate 'mods' squashfs

# Author: Michael Towers <gradgrind[at]online[dot]de>
#
# This file is part of the larch project.
#
#    larch is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    larch is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with larch; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#----------------------------------------------------------------------------
# 2008.02.20

# The new overlay will be built in memory (main tmpfs?)
merge_base=/.livesys

# test if the script is started by root user. If not, exit
if [ $UID -ne 0 ]; then
    echo "Only root can run ${APP}"; exit 1
fi

# Underlying system:        /.livesys/system
# 'mods' layer:             /.livesys/mods
# Overlay:                  /.livesys/overlay

# The overlay device (where the archives will be saved)
if [ -d $1 ]; then
    overlaypath=$1
else
    echo "ERROR: invalid directory ($1)"
    exit 1
fi

if [ -f ${overlaypath}/larch/merge-adjust ] ; then
    . ${overlaypath}/larch/merge-adjust
fi

merge_union=${merge_base}/merge_union
merge_dir=${merge_base}/merge_dir
rm -rf ${merge_union}
mkdir -p ${merge_union}
rm -rf ${merge_dir}
mkdir -p ${merge_dir}
if [ "${merge_base}" = "/.livesys" ]; then
    # if swap available, use a new tmpfs
    mktmpfs="$( cat /proc/swaps )"
    if [ -z "${mktmpfs}" ]; then
        swapon -a
        mktmpfs="$( cat /proc/swaps )"
    fi
    if [ -n "${mktmpfs}" ]; then
        mount -t tmpfs tmpfs ${merge_dir}
    fi
fi

utype="$( cat /.livesys/utype )"
if [ "${utype}" = "unionfs" ]; then
    ovlmnt="ro"
    bropt="dirs="
    opq=".wh.__dir_opaque"
else
    if [ "${utype}" != "aufs" ]; then
        echo "ERROR: bad union type (${utype}), trying aufs"
        utype="aufs"
    fi
    ovlmnt="ro+wh"
    bropt="br:"
    opq=".wh..wh..opq"
elif

layers="/.livesys/overlay=${ovlmnt}:/.livesys/mods=${ovlmnt}"
mount -t ${utype} -o ${bropt}${layers} ${utype} ${merge_union}

echo "Copying 'overlay' files to ${merge_dir}"

# Function to restore whiteouts, where necessary, to the merged overlay
whiteouts ()
{
    d="$1"
    cd "${merge_dir/${d}}"
    find . -type d | sed "s|^\./||" | while read n; do
        if [ "${n}" = "." ]; then continue; fi

        # Get all whiteout files (not directories) in the branches
        for bdir in overlay mods; do
            cd "/.livesys/${bdir}/${d}"
            find . -maxdepth 1 -regex '\./\.wh\..*' -type f | while read w; do
                wf="${w#\./\.wh\.}"
                if [ -e "/.livesys/system/${d}/${wf}" ]; then
                    cp -a "${w}" "${merge_dir/${d}}"
                fi
            done
        done
}

# Note that 'etc' is not included - mods.sqf has no /etc directory.
# The following directories are ignored:
#TODO!!!
#      /var/log /var/tmp /var/cache/pacman/pkg
for d in bin boot home lib mnt opt root sbin srv usr var; do
    if [ -d "${merge_union}/${d}" ]; then
        cp -a "${merge_union}/${d}" "${merge_dir}"
        whiteouts "${d}"
    fi
done

# Discard merge union
umount ${merge_union}

echo "creating mods.sqf_"
mksquashfs "${merge_dir}" "${overlaypath}/mods.sqf_"
if [ $? -ne 0 ]; then
    echo "ERROR: Couldn't create ${overlaypath}/mods.sqf_"
    rm -f ${overlaypath}/mods.sqf_
    exit 1
fi

if [ -n "${mktmpfs}" ]; then
    umount ${merge_dir}
fi
rm -rf ${merge_dir}

echo "creating overlay.ovl_"
# Compress the overlay (with root dir 'overlay' retained)
tar -cf - -C /.livesys overlay/etc | lzop > ${overlaypath}/overlay.ovl_
if [ $? -ne 0 ]; then
    echo "ERROR: couldn't create ${overlaypath}/overlay.ovl_"
    rm -f ${overlaypath}/overlay.ovl_
    exit 1
fi

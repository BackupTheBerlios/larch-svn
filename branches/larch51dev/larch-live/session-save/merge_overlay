#!/bin/sh

# merge_overlay   - recreate 'mods' squashfs

# Author: Michael Towers <gradgrind[at]online[dot]de>
#
# This file is part of the larch project.
#
#    larch is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    larch is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with larch; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#----------------------------------------------------------------------------
# 2008.02.27

# test if the script is started by root user. If not, exit
if [ $UID -ne 0 ]; then
    echo "Only root can run ${APP}"; exit 1
fi

# Underlying system:        /.livesys/system
# 'mods' layer:             /.livesys/mods
# Overlay:                  /.livesys/overlay

# The overlay device (where the archives will be saved)
if [ -d $1 ]; then
    overlaypath=$1
else
    echo "ERROR: invalid directory ($1)"
    exit 1
fi

if [ -f ${overlaypath}/larch/merge-adjust ] ; then
    . ${overlaypath}/larch/merge-adjust
fi

merge_union=/.livesys/merge_union
new_overlay=/.livesys/new_overlay/overlay
rm -rf ${merge_union}
mkdir -p ${merge_union}
rm -rf ${new_overlay}
mkdir -p ${new_overlay}

utype="$( cat /.livesys/utype )"
if [ "${utype}" = "unionfs" ]; then
    sqfmnt="ro"
    ovlmnt="ro"
    bropt="dirs="
    opq=".wh.__dir_opaque"
else
    if [ "${utype}" != "aufs" ]; then
        echo "ERROR: bad union type (${utype}), trying aufs"
        utype="aufs"
    fi
    sqfmnt="rr"
    ovlmnt="ro+wh"
    bropt="br:"
    opq=".wh..wh..opq"
fi

layers="${new_overlay}=rw:/.livesys/overlay=${ovlmnt}:/.livesys/mods=${sqfmnt}"
mount -t ${utype} -o ${bropt}${layers} ${utype} ${merge_union}

# Remove stuff from var
rm -rf ${merge_union}/var/log
rm -rf ${merge_union}/var/tmp
rm -rf ${merge_union}/var/cache/pacman/pkg
# Add missing stuff in /var
mkdir -p ${merge_union}/var/log/old
:>${merge_union}/var/log/wtmp
:>${merge_union}/var/log/btmp
:>${merge_union}/var/log/lastlog
mkdir -m 1777 ${merge_union}/var/tmp

echo "creating mods.sqf_"
# Note that 'etc' is not included - mods.sqf has no /etc directory.
savedirs=""
for d in bin boot home lib mnt opt root sbin srv usr var; do
    if [ -d "${merge_union}/${d}" ]; then
        savedirs="${savedirs} ${d}"
    fi
done

cd ${merge_union}
mksquashfs "${savedirs}" "${overlaypath}/mods.tmp"
if [ $? -ne 0 ]; then
    echo "ERROR: Couldn't create ${overlaypath}/mods.sqf_"
    rm -f "${overlaypath}/mods.tmp"
    exit 1
fi

echo "creating overlay.ovl_"
# Handle whiteouts and overlay
for d in ${savedirs} etc; do
    if [ -d "/.livesys/overlay/${d}" ]; then
        cd "/.livesys/overlay/${d}"
        find . -regex '.*/\.wh\.[^/]*' -type f | while read w; do
            wb="$( basename "${w}" )"
            wd="$( dirname "${w}" )"
            # Copy whiteout using temporary destination name with '.x' prefix
            cp -a "/.livesys/overlay/${d}/${wd#\./}/${wb}" \
                    "${merge_union}/${d}/${wd#\./}/.x${wb}"
        done
    fi
done

# Discard merge union
umount ${merge_union}

# Rename whiteouts
cd ${new_overlay}
find . -regex '.*/\.x\.wh\.[^/]*' -type f | while read w; do
    wb="$( basename "${w}" )"
    wd="$( dirname "${w}" )"
    mv "${w}" "${wd}/${wb#\.x}"
done

rm -rf ${new_overlay}/var/log
rm -rf ${new_overlay}/var/tmp

echo "Recompressing overlay"
ovdirs=""
for d in ${savedirs} etc; do
    ovdirs="${ovdirs} overlay/${d}"
done
tar -cf - -C ${new_overlay}/.. ${ovdirs} | lzop > "${overlaypath}/overlay.tmp"
if [ $? -ne 0 ]; then
    echo "ERROR: couldn't save overlay"
    rm -f "${overlaypath}/overlay.tmp"
    exit 1
fi

mv "${overlaypath}/overlay.tmp" "${overlaypath}/overlay.ovl_"
mv "${overlaypath}/mods.tmp" "${overlaypath}/mods.sqf_"

rm -rf ${new_overlay}
exit 0
